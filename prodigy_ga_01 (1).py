# -*- coding: utf-8 -*-
"""PRODIGY_GA_01.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1J-jBlRgzxGLn4jGNkuDkzpPFyKyE0XN4
"""

!pip install transformers datasets

from google.colab import drive
drive.mount('/content/drive')

from transformers import GPT2Tokenizer, GPT2LMHeadModel, Trainer, TrainingArguments, TextDataset, DataCollatorForLanguageModeling

model_name = "gpt2"
tokenizer = GPT2Tokenizer.from_pretrained(model_name)
model = GPT2LMHeadModel.from_pretrained(model_name)

def load_dataset(file_path, tokenizer, block_size=128):
    return TextDataset(
        tokenizer=tokenizer,
        file_path=file_path,
        block_size=block_size
    )

dataset = load_dataset("my_dataset.txt", tokenizer)

data_collator = DataCollatorForLanguageModeling(
    tokenizer=tokenizer, mlm=False
)

training_args = TrainingArguments(
    output_dir="./gpt2-finetuned",
    overwrite_output_dir=True,
    num_train_epochs=3,
    per_device_train_batch_size=2,
    save_steps=500,
    save_total_limit=2,
    logging_dir="./logs",
)

trainer = Trainer(
    model=model,
    args=training_args,
    train_dataset=dataset,
    data_collator=data_collator,
)

trainer.train()

trainer.save_model("./gpt2-finetuned")
tokenizer.save_pretrained("./gpt2-finetuned")

from transformers import pipeline

generator = pipeline('text-generation', model='./gpt2-finetuned', tokenizer=tokenizer)

output = generator("Once upon ", max_length=50, num_return_sequences=1)
print(output[0]['generated_text'])

!pip install transformers gradio

trainer.save_model("fine-tuned-gpt2")
tokenizer.save_pretrained("fine-tuned-gpt2")

import gradio as gr
from transformers import GPT2LMHeadModel, GPT2Tokenizer
import torch

# Load your fine-tuned GPT-2 model and tokenizer
model_path = "fine-tuned-gpt2"  # make sure this is the path you used when saving
tokenizer = GPT2Tokenizer.from_pretrained(model_path)
model = GPT2LMHeadModel.from_pretrained(model_path)
model.eval()

# Define the chatbot function
def chat(prompt):
    inputs = tokenizer.encode(prompt + tokenizer.eos_token, return_tensors='pt')
    outputs = model.generate(inputs, max_length=150, pad_token_id=tokenizer.eos_token_id)
    response = tokenizer.decode(outputs[:, inputs.shape[-1]:][0], skip_special_tokens=True)
    return response

# Launch the Gradio interface
gr.Interface(fn=chat, inputs="text", outputs="text", title="GPT-2 Chatbot").launch(share=True)